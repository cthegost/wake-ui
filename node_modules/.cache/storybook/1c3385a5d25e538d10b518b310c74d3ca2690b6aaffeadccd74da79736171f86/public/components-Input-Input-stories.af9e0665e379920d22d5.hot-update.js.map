{"version":3,"file":"components-Input-Input-stories.af9e0665e379920d22d5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA","sources":["webpack://wui/./src/components/Input/Input.stories.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Input from './Input';\n\nconst meta: Meta<typeof Input> = {\n  title: 'Components/Input',\n  component: Input,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text', description: 'Текст лейбла над полем' },\n    labelVariant: {\n        control: 'select',\n        options: ['standard', 'outline'],\n        description: 'Вариант отображения лейбла'\n    },\n    error: { control: 'text', description: 'Текст ошибки под полем (null для отсутствия)' },\n    disabled: { control: 'boolean', description: 'Отключает поле' },\n    placeholder: { control: 'text', description: 'Плейсхолдер внутри поля' },\n    type: {\n        control: 'select',\n        options: ['text', 'password', 'email', 'number', 'search', 'tel', 'url'],\n        description: 'Тип поля ввода (HTML input type)'\n    },\n    // value и onChange обычно управляются состоянием, не через Controls, но можно добавить для дебага\n    value: { control: 'text', description: 'Значение поля (контролируемое)' },\n    // onChange: { action: 'changed', description: 'Событие изменения значения' }\n  },\n  args: { // Значения по умолчанию для всех историй\n    label: 'Метка поля',\n    labelVariant: 'standard',\n    placeholder: 'Введите текст...',\n    error: null,\n    disabled: false,\n    type: 'text',\n  }\n};\n\nexport default meta;\n\n// Базовая история с контролируемым состоянием\nexport const Default: StoryObj<typeof Input> = {\n  render: (args) => {\n    // Используем useState для демонстрации контролируемого инпута\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История без лейбла\nexport const WithoutLabel: StoryObj<typeof Input> = {\n  args: {\n    label: undefined, // Убираем лейбл\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История с ошибкой\nexport const WithError: StoryObj<typeof Input> = {\n  args: {\n    error: 'Это обязательное поле', // Устанавливаем текст ошибки\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n\n// История для типа password\nexport const Password: StoryObj<typeof Input> = {\n    args: {\n        label: 'Пароль',\n        type: 'password',\n        placeholder: 'Введите пароль',\n    },\n    render: (args) => {\n        const [value, setValue] = useState('');\n        return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n    },\n};\n\n// История для отключенного состояния\nexport const Disabled: StoryObj<typeof Input> = {\n    args: {\n        label: 'Отключено',\n        disabled: true,\n        placeholder: 'Нельзя редактировать',\n    },\n     render: (args) => {\n        // Для disabled можно не использовать state\n        return <Input {...args} />;\n    },\n};\n\n// История для Outline варианта\nexport const OutlineLabel: StoryObj<typeof Input> = {\n  args: {\n    labelVariant: 'outline',\n    label: 'Лейбл в рамке',\n    placeholder: undefined, \n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История для Outline варианта с ошибкой\nexport const OutlineWithError: StoryObj<typeof Input> = {\n  args: {\n    labelVariant: 'outline',\n    label: 'Поле с ошибкой',\n    placeholder: undefined,\n    error: 'Неверное значение',\n  },\n   render: (args) => {\n    const [value, setValue] = useState('some value');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n}; "],"names":[],"sourceRoot":""}