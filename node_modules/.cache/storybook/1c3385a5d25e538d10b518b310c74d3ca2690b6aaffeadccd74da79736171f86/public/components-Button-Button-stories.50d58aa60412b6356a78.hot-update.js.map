{"version":3,"file":"components-Button-Button-stories.50d58aa60412b6356a78.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAUA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://wui/./src/components/Button/Button.tsx"],"sourcesContent":["import React from 'react';\n\n// Определяем возможные варианты кнопки\ntype ButtonVariant = 'filled' | 'outline' | 'text';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  variant?: ButtonVariant; // Добавляем необязательный проп variant\n}\n\nconst Button: React.FC<ButtonProps> = ({ \n  children, \n  variant = 'filled', // Устанавливаем 'filled' как значение по умолчанию\n  className, // Получаем className из пропсов\n  ...props \n}) => {\n  // Формируем классы в зависимости от варианта\n  // Пока это будут простые классы, позже мы добавим им стили\n  const variantClass = `button--${variant}`; \n  const combinedClassName = [variantClass, className].filter(Boolean).join(' '); // Объединяем классы\n\n  return (\n    <button className={combinedClassName} {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button; "],"names":[],"sourceRoot":""}