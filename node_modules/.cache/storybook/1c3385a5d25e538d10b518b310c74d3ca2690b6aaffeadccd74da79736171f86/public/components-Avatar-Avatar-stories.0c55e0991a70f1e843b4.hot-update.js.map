{"version":3,"file":"components-Avatar-Avatar-stories.0c55e0991a70f1e843b4.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AAAA;AACA;;;;;;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;;;;;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://wake-ui/./src/components/Avatar/Avatar.tsx"],"sourcesContent":["import React from 'react';\nimport './Avatar.css'; // Импортируем стили\n\ntype AvatarSize = 'small' | 'medium' | 'large';\ntype AvatarShape = 'circle' | 'square';\n\ninterface AvatarProps extends React.HTMLAttributes<HTMLDivElement> {\n  src?: string | null;    // URL изображения\n  alt?: string;           // Alt текст для изображения\n  name?: string;          // Имя для генерации инициалов\n  size?: AvatarSize;      // Размер\n  shape?: AvatarShape;    // Форма\n}\n\n// Функция для получения инициалов из имени\nconst getInitials = (name: string): string => {\n  if (!name) return '';\n  const names = name.trim().split(' ');\n  if (names.length === 1) {\n    return names[0].charAt(0).toUpperCase();\n  }\n  return (names[0].charAt(0) + names[names.length - 1].charAt(0)).toUpperCase();\n};\n\n// --- Добавляем генерацию цвета --- \nconst stringToColor = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  // Генерируем цвет в формате HSL для лучшего распределения\n  const h = hash % 360;\n  // Ограничиваем насыщенность и светлоту для получения пастельных тонов\n  const s = 60 + (hash % 10); // 60-70%\n  const l = 75 + (hash % 10); // 75-85%\n  return `hsl(${h}, ${s}%, ${l}%)`;\n};\n// ----------------------------------\n\nconst Avatar: React.FC<AvatarProps> = ({\n  src = null,\n  alt = 'Avatar',\n  name = '',\n  size = 'medium',\n  shape = 'circle',\n  className, // Пользовательские классы\n  style,     // Пользовательские стили\n  ...props   // Остальные div атрибуты\n}) => {\n  const [imgError, setImgError] = React.useState(false); // Состояние ошибки загрузки изображения\n\n  // --- Генерируем цвет фона, если показываем инициалы --- \n  const backgroundColor = !src && name ? stringToColor(name) : undefined;\n  // -------------------------------------------------------\n\n  // Определяем, что отображать: изображение, инициалы или плейсхолдер\n  let content: React.ReactNode;\n  const showImage = src && !imgError;\n  const showInitials = !showImage && name;\n\n  if (showImage) {\n    content = (\n      <img\n        src={src}\n        alt={alt}\n        className=\"avatar-image\"\n        onError={() => setImgError(true)} // Устанавливаем ошибку при неудачной загрузке\n      />\n    );\n  } else if (showInitials) {\n    content = (\n      <span className=\"avatar-initials\" aria-label={alt}>\n        {getInitials(name)}\n      </span>\n    );\n  } else {\n    // Плейсхолдер (можно вставить SVG иконку пользователя)\n    content = (\n      <span className=\"avatar-placeholder\" aria-label={alt}>\n        {/* Пример SVG иконки пользователя (можно вынести в отдельный компонент Icon) */}\n        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\" />\n        </svg>\n      </span>\n    );\n  }\n\n  const avatarClassName = [\n    'avatar-container',\n    `avatar--${size}`,\n    `avatar--${shape}`,\n    className,\n  ].filter(Boolean).join(' ');\n\n  // --- Объединяем переданные стили со сгенерированным фоном --- \n  const combinedStyle = {\n    ...style, // Пользовательские стили\n    backgroundColor: backgroundColor || style?.backgroundColor, // Применяем сгенерированный фон, если он есть, иначе оставляем пользовательский или дефолтный из CSS\n  };\n  // ------------------------------------------------------------\n\n  return (\n    <div className={avatarClassName} style={combinedStyle} {...props}>\n      {content}\n    </div>\n  );\n};\n\nexport default Avatar; "],"names":[],"sourceRoot":""}