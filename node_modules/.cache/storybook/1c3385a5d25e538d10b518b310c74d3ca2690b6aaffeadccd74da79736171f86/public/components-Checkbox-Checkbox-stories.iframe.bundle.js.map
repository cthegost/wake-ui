{"version":3,"file":"components-Checkbox-Checkbox-stories.iframe.bundle.js","mappingsrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAHA;;;;;;;;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9HA;AACA;AAQA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAGA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAAA;AAAA;;;;;;;;;;;;;;;;;AAIA;AAEA","sources":["webpack://wake-ui/./src/components/Checkbox/Checkbox.css","webpack://wake-ui/./src/components/Checkbox/Checkbox.css?a6be","webpack://wake-ui/./src/components/Checkbox/Checkbox.stories.tsx","webpack://wake-ui/./src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Контейнер для выравнивания чекбокса и лейбла */\n.checkbox-container {\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  user-select: none;\n  vertical-align: middle;\n  margin: 5px;\n}\n\n/* Внешний label как обертка */\n.checkbox-label-wrapper {\n  display: inline-flex;\n  align-items: center;\n  cursor: inherit; /* Наследуем курсор от контейнера */\n}\n\n/* Скрытие оригинального чекбокса */\n.checkbox-input {\n  position: absolute;\n  opacity: 0;\n  pointer-events: none;\n  width: 0;\n  height: 0;\n}\n\n/* Визуальное представление чекбокса (квадратик) */\n.checkbox-visual {\n  display: inline-block;\n  width: 18px;\n  height: 18px;\n  border: 2px solid #adb5bd; /* Серая рамка */\n  border-radius: 3px;\n  margin-right: 8px; /* Отступ от текста */\n  position: relative;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;\n  flex-shrink: 0; /* Предотвращаем сжатие */\n}\n\n/* Иконки внутри (галочка и минус) */\n.checkbox-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(0); /* Скрыты по умолчанию */\n  width: 14px; /* <--- Увеличиваем размер */\n  height: 14px; /* <--- Увеличиваем размер */\n  fill: white; /* Цвет иконки */\n  transition: transform 0.15s ease-in-out;\n}\n\n/* Стили для состояния checked */\n.checkbox-input:checked + .checkbox-visual {\n  background-color: #007bff;\n  border-color: #007bff;\n}\n.checkbox-input:checked + .checkbox-visual .checkbox-icon--checked {\n  transform: translate(-50%, -50%) scale(1); /* Показываем галочку */\n}\n\n/* Стили для состояния indeterminate */\n.checkbox-container--indeterminate .checkbox-input + .checkbox-visual {\n  background-color: #007bff;\n  border-color: #007bff;\n}\n/* Убеждаемся, что галочка скрыта в indeterminate состоянии */\n.checkbox-container--indeterminate .checkbox-input:checked + .checkbox-visual .checkbox-icon--checked {\n    transform: translate(-50%, -50%) scale(0);\n}\n.checkbox-container--indeterminate .checkbox-input + .checkbox-visual .checkbox-icon--indeterminate {\n   transform: translate(-50%, -50%) scale(1); /* Показываем минус */\n}\n\n\n/* Стили для состояния disabled */\n.checkbox-container--disabled {\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n.checkbox-container--disabled .checkbox-label-wrapper {\n    cursor: not-allowed;\n}\n\n\n/* Стиль для текстового лейбла */\n.checkbox-text-label {\n  font-size: 1rem;\n  color: #333;\n}\n\n/* Состояние фокуса (для доступности) */\n.checkbox-input:focus + .checkbox-visual {\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n  border-color: #80bdff;\n} `, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Checkbox/Checkbox.css\"],\"names\":[],\"mappings\":\"AAAA,iDAAiD;AACjD;EACE,oBAAoB;EACpB,mBAAmB;EACnB,eAAe;EACf,iBAAiB;EACjB,sBAAsB;EACtB,WAAW;AACb;;AAEA,8BAA8B;AAC9B;EACE,oBAAoB;EACpB,mBAAmB;EACnB,eAAe,EAAE,mCAAmC;AACtD;;AAEA,mCAAmC;AACnC;EACE,kBAAkB;EAClB,UAAU;EACV,oBAAoB;EACpB,QAAQ;EACR,SAAS;AACX;;AAEA,kDAAkD;AAClD;EACE,qBAAqB;EACrB,WAAW;EACX,YAAY;EACZ,yBAAyB,EAAE,gBAAgB;EAC3C,kBAAkB;EAClB,iBAAiB,EAAE,qBAAqB;EACxC,kBAAkB;EAClB,8EAA8E;EAC9E,cAAc,EAAE,yBAAyB;AAC3C;;AAEA,oCAAoC;AACpC;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,yCAAyC,EAAE,wBAAwB;EACnE,WAAW,EAAE,4BAA4B;EACzC,YAAY,EAAE,4BAA4B;EAC1C,WAAW,EAAE,gBAAgB;EAC7B,uCAAuC;AACzC;;AAEA,gCAAgC;AAChC;EACE,yBAAyB;EACzB,qBAAqB;AACvB;AACA;EACE,yCAAyC,EAAE,uBAAuB;AACpE;;AAEA,sCAAsC;AACtC;EACE,yBAAyB;EACzB,qBAAqB;AACvB;AACA,6DAA6D;AAC7D;IACI,yCAAyC;AAC7C;AACA;GACG,yCAAyC,EAAE,qBAAqB;AACnE;;;AAGA,iCAAiC;AACjC;EACE,mBAAmB;EACnB,YAAY;AACd;AACA;IACI,mBAAmB;AACvB;;;AAGA,gCAAgC;AAChC;EACE,eAAe;EACf,WAAW;AACb;;AAEA,uCAAuC;AACvC;EACE,6CAA6C;EAC7C,qBAAqB;AACvB\",\"sourcesContent\":[\"/* Контейнер для выравнивания чекбокса и лейбла */\\n.checkbox-container {\\n  display: inline-flex;\\n  align-items: center;\\n  cursor: pointer;\\n  user-select: none;\\n  vertical-align: middle;\\n  margin: 5px;\\n}\\n\\n/* Внешний label как обертка */\\n.checkbox-label-wrapper {\\n  display: inline-flex;\\n  align-items: center;\\n  cursor: inherit; /* Наследуем курсор от контейнера */\\n}\\n\\n/* Скрытие оригинального чекбокса */\\n.checkbox-input {\\n  position: absolute;\\n  opacity: 0;\\n  pointer-events: none;\\n  width: 0;\\n  height: 0;\\n}\\n\\n/* Визуальное представление чекбокса (квадратик) */\\n.checkbox-visual {\\n  display: inline-block;\\n  width: 18px;\\n  height: 18px;\\n  border: 2px solid #adb5bd; /* Серая рамка */\\n  border-radius: 3px;\\n  margin-right: 8px; /* Отступ от текста */\\n  position: relative;\\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;\\n  flex-shrink: 0; /* Предотвращаем сжатие */\\n}\\n\\n/* Иконки внутри (галочка и минус) */\\n.checkbox-icon {\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%) scale(0); /* Скрыты по умолчанию */\\n  width: 14px; /* <--- Увеличиваем размер */\\n  height: 14px; /* <--- Увеличиваем размер */\\n  fill: white; /* Цвет иконки */\\n  transition: transform 0.15s ease-in-out;\\n}\\n\\n/* Стили для состояния checked */\\n.checkbox-input:checked + .checkbox-visual {\\n  background-color: #007bff;\\n  border-color: #007bff;\\n}\\n.checkbox-input:checked + .checkbox-visual .checkbox-icon--checked {\\n  transform: translate(-50%, -50%) scale(1); /* Показываем галочку */\\n}\\n\\n/* Стили для состояния indeterminate */\\n.checkbox-container--indeterminate .checkbox-input + .checkbox-visual {\\n  background-color: #007bff;\\n  border-color: #007bff;\\n}\\n/* Убеждаемся, что галочка скрыта в indeterminate состоянии */\\n.checkbox-container--indeterminate .checkbox-input:checked + .checkbox-visual .checkbox-icon--checked {\\n    transform: translate(-50%, -50%) scale(0);\\n}\\n.checkbox-container--indeterminate .checkbox-input + .checkbox-visual .checkbox-icon--indeterminate {\\n   transform: translate(-50%, -50%) scale(1); /* Показываем минус */\\n}\\n\\n\\n/* Стили для состояния disabled */\\n.checkbox-container--disabled {\\n  cursor: not-allowed;\\n  opacity: 0.6;\\n}\\n.checkbox-container--disabled .checkbox-label-wrapper {\\n    cursor: not-allowed;\\n}\\n\\n\\n/* Стиль для текстового лейбла */\\n.checkbox-text-label {\\n  font-size: 1rem;\\n  color: #333;\\n}\\n\\n/* Состояние фокуса (для доступности) */\\n.checkbox-input:focus + .checkbox-visual {\\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\\n  border-color: #80bdff;\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Checkbox.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Checkbox.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Checkbox.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState, useEffect } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Checkbox from './Checkbox';\n\nconst meta: Meta<typeof Checkbox> = {\n  title: 'Components/Checkbox',\n  component: Checkbox,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text', description: 'Текст лейбла рядом с чекбоксом' },\n    checked: { control: 'boolean', description: 'Состояние: отмечен / не отмечен' },\n    indeterminate: { control: 'boolean', description: 'Состояние: неопределенное' },\n    disabled: { control: 'boolean', description: 'Отключает чекбокс' },\n    // onChange: { action: 'changed' },\n  },\n  args: { // Значения по умолчанию\n    label: 'Метка чекбокса',\n    checked: false,\n    indeterminate: false,\n    disabled: false,\n  }\n};\n\nexport default meta;\n\n// --- Базовые истории ---\n\nexport const Default: StoryObj<typeof Checkbox> = {\n  render: (args) => {\n    const [isChecked, setIsChecked] = useState(args.checked);\n    // Сбрасываем indeterminate при явном клике пользователя\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsChecked(e.target.checked);\n        // Здесь может быть логика, которая также сбрасывает indeterminate,\n        // но в Storybook для простоты оставим управление через args.\n    };\n    return <Checkbox {...args} checked={isChecked} onChange={handleChange} />;\n  },\n};\n\nexport const Checked: StoryObj<typeof Checkbox> = {\n  args: { checked: true, label: 'Уже отмечен' },\n  render: (args) => {\n    const [isChecked, setIsChecked] = useState(args.checked);\n    return <Checkbox {...args} checked={isChecked} onChange={(e) => setIsChecked(e.target.checked)} />;\n  },\n};\n\nexport const Indeterminate: StoryObj<typeof Checkbox> = {\n  args: { indeterminate: true, label: 'Неопределенное состояние' },\n   render: (args) => {\n    // Для демонстрации indeterminate часто управляют checked и indeterminate извне\n    const [isChecked, setIsChecked] = useState(false); // Может быть true или false\n    const [isIndeterminate, setIsIndeterminate] = useState(args.indeterminate);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newChecked = e.target.checked;\n        setIsChecked(newChecked);\n        setIsIndeterminate(false); // Сбрасываем indeterminate при клике\n    };\n\n    return <Checkbox {...args} label={`Checked: ${isChecked}, Indet: ${isIndeterminate}`} checked={isChecked} indeterminate={isIndeterminate} onChange={handleChange} />;\n  },\n};\n\nexport const Disabled: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, label: 'Отключен (не отмечен)' },\n  render: (args) => <Checkbox {...args} />, // Можно не использовать state\n};\n\nexport const DisabledChecked: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, checked: true, label: 'Отключен (отмечен)' },\n  render: (args) => <Checkbox {...args} />,\n};\n\nexport const DisabledIndeterminate: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, indeterminate: true, label: 'Отключен (неопределен)' },\n  render: (args) => <Checkbox {...args} />,\n};\n\n// --- Пример использования Indeterminate ---\nexport const SelectAllExample: StoryObj = {\n  name: 'Пример: Выбрать все',\n  render: () => {\n    const options = ['Яблоко', 'Банан', 'Апельсин'];\n    const [selected, setSelected] = useState<string[]>(['Банан']); // Изначально выбран 'Банан'\n\n    const handleParentChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSelected(e.target.checked ? options : []);\n    };\n\n    const handleChildChange = (option: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.checked) {\n        setSelected([...selected, option]);\n      } else {\n        setSelected(selected.filter(item => item !== option));\n      }\n    };\n\n    const isAllSelected = selected.length === options.length;\n    const isIndeterminate = selected.length > 0 && selected.length < options.length;\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n        <Checkbox\n          label=\"Выбрать все\"\n          checked={isAllSelected}\n          indeterminate={isIndeterminate}\n          onChange={handleParentChange}\n        />\n        <div style={{ marginLeft: '20px', display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n          {options.map(option => (\n            <Checkbox\n              key={option}\n              label={option}\n              checked={selected.includes(option)}\n              onChange={handleChildChange(option)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}; ","import React, { useId, useRef, useEffect } from 'react';\nimport './Checkbox.css'; // Импортируем стили\n\n// Расширяем стандартные атрибуты input type=\"checkbox\", добавляем indeterminate\ninterface CheckboxProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'indeterminate'> {\n  label?: string;         // Необязательный лейбл\n  indeterminate?: boolean; // Состояние \"неопределенности\"\n}\n\nconst Checkbox: React.FC<CheckboxProps> = ({\n  label,\n  className, // Пользовательские классы для внешнего контейнера\n  id: propId,\n  checked,\n  disabled,\n  indeterminate = false, // По умолчанию false\n  ...props // Остальные атрибуты (value, name, onChange и т.д.)\n}) => {\n  const generatedId = useId();\n  const id = propId || generatedId;\n  const inputRef = useRef<HTMLInputElement>(null); // Ref для доступа к input элементу\n\n  // Используем useEffect для установки/снятия свойства indeterminate на DOM-элементе\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = indeterminate;\n    }\n  }, [indeterminate]);\n\n  // Добавляем класс для неопределенного состояния\n  const containerClassName = [\n    'checkbox-container',\n    disabled ? 'checkbox-container--disabled' : '',\n    indeterminate ? 'checkbox-container--indeterminate' : '', // Класс для indeterminate\n    className,\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className={containerClassName}>\n      {/* Используем label как обертку для кликабельности */}\n      <label htmlFor={id} className=\"checkbox-label-wrapper\">\n        {/* Сам input */}\n        <input\n          ref={inputRef} // Привязываем ref\n          type=\"checkbox\"\n          id={id}\n          className=\"checkbox-input\"\n          checked={checked}\n          disabled={disabled}\n          // Не устанавливаем indeterminate здесь, делаем через ref\n          {...props}\n        />\n        {/* Визуальное представление чекбокса */}\n        <span className=\"checkbox-visual\">\n            {/* Иконка для checked состояния */}\n            <svg className=\"checkbox-icon checkbox-icon--checked\" viewBox=\"0 0 16 16\" fill=\"currentColor\" aria-hidden=\"true\">\n                <path d=\"M12.707 5.293a1 1 0 0 1 0 1.414l-5 5a1 1 0 0 1-1.414 0l-2-2a1 1 0 1 1 1.414-1.414L7 9.586l4.293-4.293a1 1 0 0 1 1.414 0z\"/>\n            </svg>\n            {/* Иконка для indeterminate состояния (минус) */}\n             <svg className=\"checkbox-icon checkbox-icon--indeterminate\" viewBox=\"0 0 16 16\" fill=\"currentColor\" aria-hidden=\"true\">\n                <path d=\"M4 8a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H5a1 1 0 0 1-1-1z\"/>\n            </svg>\n        </span>\n        {/* Текстовый лейбл (если есть) */}\n        {label && <span className=\"checkbox-text-label\">{label}</span>}\n      </label>\n    </div>\n  );\n};\n\nexport default Checkbox; // <--- Вот этот экспорт важен! "],"names":[],"sourceRoot":""}