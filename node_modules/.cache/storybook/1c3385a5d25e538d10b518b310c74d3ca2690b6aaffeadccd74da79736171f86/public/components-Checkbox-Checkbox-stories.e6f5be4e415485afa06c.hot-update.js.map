{"version":3,"file":"components-Checkbox-Checkbox-stories.e6f5be4e415485afa06c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAHA;;;;;;;;;;;;;;;AASA;AACA","sources":["webpack://wake-ui/./src/components/Checkbox/Checkbox.stories.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Checkbox from './Checkbox';\n\nconst meta: Meta<typeof Checkbox> = {\n  title: 'Components/Checkbox',\n  component: Checkbox,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text', description: 'Текст лейбла рядом с чекбоксом' },\n    checked: { control: 'boolean', description: 'Состояние: отмечен / не отмечен' },\n    indeterminate: { control: 'boolean', description: 'Состояние: неопределенное' },\n    disabled: { control: 'boolean', description: 'Отключает чекбокс' },\n    // onChange: { action: 'changed' },\n  },\n  args: { // Значения по умолчанию\n    label: 'Метка чекбокса',\n    checked: false,\n    indeterminate: false,\n    disabled: false,\n  }\n};\n\nexport default meta;\n\n// --- Базовые истории ---\n\nexport const Default: StoryObj<typeof Checkbox> = {\n  render: (args) => {\n    const [isChecked, setIsChecked] = useState(args.checked);\n    // Сбрасываем indeterminate при явном клике пользователя\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setIsChecked(e.target.checked);\n        // Здесь может быть логика, которая также сбрасывает indeterminate,\n        // но в Storybook для простоты оставим управление через args.\n    };\n    return <Checkbox {...args} checked={isChecked} onChange={handleChange} />;\n  },\n};\n\nexport const Checked: StoryObj<typeof Checkbox> = {\n  args: { checked: true, label: 'Уже отмечен' },\n  render: (args) => {\n    const [isChecked, setIsChecked] = useState(args.checked);\n    return <Checkbox {...args} checked={isChecked} onChange={(e) => setIsChecked(e.target.checked)} />;\n  },\n};\n\nexport const Indeterminate: StoryObj<typeof Checkbox> = {\n  args: { indeterminate: true, label: 'Неопределенное состояние' },\n   render: (args) => {\n    // Для демонстрации indeterminate часто управляют checked и indeterminate извне\n    const [isChecked, setIsChecked] = useState(false); // Может быть true или false\n    const [isIndeterminate, setIsIndeterminate] = useState(args.indeterminate);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newChecked = e.target.checked;\n        setIsChecked(newChecked);\n        setIsIndeterminate(false); // Сбрасываем indeterminate при клике\n    };\n\n    return <Checkbox {...args} label={`Checked: ${isChecked}, Indet: ${isIndeterminate}`} checked={isChecked} indeterminate={isIndeterminate} onChange={handleChange} />;\n  },\n};\n\nexport const Disabled: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, label: 'Отключен (не отмечен)' },\n  render: (args) => <Checkbox {...args} />, // Можно не использовать state\n};\n\nexport const DisabledChecked: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, checked: true, label: 'Отключен (отмечен)' },\n  render: (args) => <Checkbox {...args} />,\n};\n\nexport const DisabledIndeterminate: StoryObj<typeof Checkbox> = {\n  args: { disabled: true, indeterminate: true, label: 'Отключен (неопределен)' },\n  render: (args) => <Checkbox {...args} />,\n};\n\n// --- Пример использования Indeterminate ---\nexport const SelectAllExample: StoryObj = {\n  name: 'Пример: Выбрать все',\n  render: () => {\n    const options = ['Яблоко', 'Банан', 'Апельсин'];\n    const [selected, setSelected] = useState<string[]>(['Банан']); // Изначально выбран 'Банан'\n\n    const handleParentChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSelected(e.target.checked ? options : []);\n    };\n\n    const handleChildChange = (option: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.checked) {\n        setSelected([...selected, option]);\n      } else {\n        setSelected(selected.filter(item => item !== option));\n      }\n    };\n\n    const isAllSelected = selected.length === options.length;\n    const isIndeterminate = selected.length > 0 && selected.length < options.length;\n\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n        <Checkbox\n          label=\"Выбрать все\"\n          checked={isAllSelected}\n          indeterminate={isIndeterminate}\n          onChange={handleParentChange}\n        />\n        <div style={{ marginLeft: '20px', display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n          {options.map(option => (\n            <Checkbox\n              key={option}\n              label={option}\n              checked={selected.includes(option)}\n              onChange={handleChildChange(option)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}; "],"names":[],"sourceRoot":""}