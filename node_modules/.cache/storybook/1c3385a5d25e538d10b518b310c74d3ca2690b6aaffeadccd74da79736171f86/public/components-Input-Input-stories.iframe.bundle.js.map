{"version":3,"file":"components-Input-Input-stories.iframe.bundle.js","mappingssources":["webpack://wake-ui/./src/components/Input/Input.css","webpack://wake-ui/./src/components/Input/Input.css?da8a","webpack://wake-ui/./src/components/Input/Input.stories.tsx","webpack://wake-ui/./src/components/Input/Input.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Контейнер для инпута, лейбла и ошибки */\n.input-container {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem; /* Отступ снизу */\n  width: 100%; /* По умолчанию занимает всю доступную ширину */\n  max-width: 400px; /* Ограничим максимальную ширину для демонстрации */\n  position: relative; /* Для позиционирования outline лейбла */\n}\n\n/* --- Стили для Standard Label (variant='standard') --- */\n\n/* Стиль для стандартного лейбла (над полем) */\n.input-label {\n  margin-bottom: 0.3rem;\n  font-size: 0.9rem;\n  color: #333;\n  font-weight: 500;\n  transition: color 0.2s ease-in-out;\n}\n\n/* Затемнение стандартного лейбла при ошибке */\n.input-container--error .input-label {\n    color: #dc3545;\n}\n\n/* --- Стили для Outline Label (variant='outline') --- */\n\n/* Убираем стандартный label для outline варианта */\n.input-container--label-outline .input-label {\n    display: none;\n}\n\n/* Стили для fieldset, который будет рамкой */\n.input-fieldset {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 0; /* Убираем стандартный padding */\n  margin: 0; /* Убираем стандартный margin */\n  transition: border-color 0.2s ease-in-out;\n  position: relative; /* Для корректной работы legend */\n}\n\n/* Стили для legend, содержащего лейбл */\n.input-legend {\n  padding: 0; /* Без паддингов */\n  margin-left: 8px;\n  font-size: 0.75rem; /* Размер важен для расчета ширины выреза */\n  line-height: 0; /* Схлопываем по высоте */\n  max-width: 0.01px;\n  visibility: hidden;\n  transition: max-width 0.15s cubic-bezier(0.0, 0, 0.2, 1) 50ms; /* Анимация выреза */\n}\n.input-legend span {\n    display: inline-block;\n    padding-left: 5px;\n    padding-right: 5px;\n    opacity: 0; /* Невидимый текст */\n}\n\n/* Плавающий лейбл */\n.input-label-floating {\n  position: absolute;\n  top: 0; /* Начальное положение */\n  left: 8px; /* Отступ слева */\n  padding: 0 4px; /* Отступы по бокам */\n  color: #6c757d; /* Цвет неактивного лейбла */\n  pointer-events: none; /* Не мешает кликам на инпут */\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 16px); /* Ограничение ширины */\n  transform-origin: left top;\n  /* Анимация */\n  transition: transform 0.2s cubic-bezier(0.0, 0, 0.2, 1),\n              color 0.2s cubic-bezier(0.0, 0, 0.2, 1),\n              font-size 0.2s cubic-bezier(0.0, 0, 0.2, 1); /* Добавляем font-size в transition */\n\n  /* Начальное положение (как плейсхолдер) - выравниваем по центру инпута */\n  font-size: 1rem;\n  transform: translateY(calc(0.8rem + 1px)); /* Выравнивание по вертикали = половина паддинга + половина бордера */\n}\n\n/* Состояние лейбла \"всплывшее\" (при фокусе или значении) */\n/* Используем :focus-within на fieldset и :not(:placeholder-shown) на input */\n.input-fieldset:focus-within .input-label-floating,\n.input-field:not(:placeholder-shown) + .input-label-floating { \n  transform: translateY(-50%) scale(0.75); /* Поднимаем, уменьшаем */\n  color: #007bff; /* Активный цвет */\n  background-color: white; /* Фон для перекрытия рамки */\n}\n\n/* Открытие выреза в legend при всплытии лейбла */\n.input-fieldset:focus-within .input-legend,\n.input-field:not(:placeholder-shown) + .input-label-floating + .input-legend, /* Не сработает, legend раньше */\n/* Корректный селектор: ищем legend внутри fieldset, если input НЕ пустой ИЛИ fieldset в фокусе */\n.input-container--label-outline .input-field:not(:placeholder-shown) ~ .input-legend,\n.input-container--label-outline .input-fieldset:focus-within .input-legend \n{\n   max-width: 1000px; /* Раскрываем вырез (любое достаточно большое значение) */\n}\n\n/* Цвет всплывшего лейбла при ошибке */\n.input-container--error .input-fieldset:focus-within .input-label-floating,\n.input-container--error .input-field:not(:placeholder-shown) + .input-label-floating { \n  color: #dc3545;\n}\n\n/* Стили fieldset при фокусе */\n.input-fieldset:focus-within {\n  border-color: #007bff;\n  /* Тень убираем отсюда, она не нужна для floating label */\n  /* box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); */\n}\n\n/* Стили fieldset при ошибке */\n.input-container--error .input-fieldset {\n  border-color: #dc3545;\n}\n/* Стили legend при ошибке и фокусе/значении */\n.input-container--error .input-fieldset:focus-within .input-legend,\n.input-container--error .input-field:not(:placeholder-shown) ~ .input-legend {\n    color: #dc3545;\n}\n\n/* Стили fieldset при ошибке и фокусе */\n/* .input-container--error .input-fieldset:focus-within {\n  box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25);\n} */\n\n/* --- Общие стили для Input Field --- */\n\n.input-field {\n  /* padding: 0.8rem 0.8rem 0.4rem; */ /* Убираем специфичный padding */\n  padding: 0.6rem 0.8rem; /* Возвращаем стандартный padding */\n  /* border: none; */ /* Убираем это */\n  border: 1px solid #ccc; /* Возвращаем стандартную рамку */\n  /* border-radius: 0; */ /* Убираем обнуление */\n  border-radius: 4px; /* Возвращаем стандартное скругление */\n  font-size: 1rem;\n  color: #212529; /* <--- Явно задаем цвет текста */\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  width: 100%;\n  box-sizing: border-box;\n  /* background: none; */ /* Оставляем фон по умолчанию для standard */\n  outline: none; \n}\n\n/* Убираем рамку и скругление и ставим спец. паддинг для input внутри fieldset (outline) */\n.input-fieldset .input-field {\n    border: none;\n    border-radius: 0;\n    background: none; \n    padding: 1.2rem 0.8rem 0.4rem; \n    color: #212529; /* <--- Явно задаем цвет текста здесь еще раз */\n}\n\n/* Стили при фокусе для standard варианта */\n.input-field:focus {\n  /* box-shadow: none; */ /* Убираем это, тень нужна для standard */\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n/* Убираем box-shadow с инпута при фокусе, только если он внутри fieldset */\n.input-fieldset .input-field:focus {\n    box-shadow: none;\n}\n\n/* Стили инпута при ошибке для standard */\n.input-field--error {\n   /* border-color убран, он на fieldset */\n   border-color: #dc3545; /* Возвращаем рамку ошибки для standard */\n}\n\n/* Стили инпута при ошибке только внутри fieldset (убираем рамку) */\n.input-fieldset .input-field--error {\n    border-color: transparent; /* Или border: none; */\n}\n\n/* Убираем box-shadow с инпута при ошибке и фокусе */\n.input-field--error:focus {\n  /* box-shadow: none; */ /* Убираем это, тень нужна для standard */\n   box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25);\n}\n\n/* Убираем box-shadow с инпута при ошибке и фокусе только внутри fieldset */\n.input-fieldset .input-field--error:focus {\n    box-shadow: none;\n}\n\n/* Стиль для сообщения об ошибке (без изменений) */\n.input-error-message {\n  margin-top: 0.3rem;\n  font-size: 0.8rem;\n  color: #dc3545;\n} `, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Input/Input.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/* Контейнер для инпута, лейбла и ошибки */\\n.input-container {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; /* Отступ снизу */\\n  width: 100%; /* По умолчанию занимает всю доступную ширину */\\n  max-width: 400px; /* Ограничим максимальную ширину для демонстрации */\\n  position: relative; /* Для позиционирования outline лейбла */\\n}\\n\\n/* --- Стили для Standard Label (variant='standard') --- */\\n\\n/* Стиль для стандартного лейбла (над полем) */\\n.input-label {\\n  margin-bottom: 0.3rem;\\n  font-size: 0.9rem;\\n  color: #333;\\n  font-weight: 500;\\n  transition: color 0.2s ease-in-out;\\n}\\n\\n/* Затемнение стандартного лейбла при ошибке */\\n.input-container--error .input-label {\\n    color: #dc3545;\\n}\\n\\n/* --- Стили для Outline Label (variant='outline') --- */\\n\\n/* Убираем стандартный label для outline варианта */\\n.input-container--label-outline .input-label {\\n    display: none;\\n}\\n\\n/* Стили для fieldset, который будет рамкой */\\n.input-fieldset {\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  padding: 0; /* Убираем стандартный padding */\\n  margin: 0; /* Убираем стандартный margin */\\n  transition: border-color 0.2s ease-in-out;\\n  position: relative; /* Для корректной работы legend */\\n}\\n\\n/* Стили для legend, содержащего лейбл */\\n.input-legend {\\n  padding: 0; /* Без паддингов */\\n  margin-left: 8px;\\n  font-size: 0.75rem; /* Размер важен для расчета ширины выреза */\\n  line-height: 0; /* Схлопываем по высоте */\\n  max-width: 0.01px;\\n  visibility: hidden;\\n  transition: max-width 0.15s cubic-bezier(0.0, 0, 0.2, 1) 50ms; /* Анимация выреза */\\n}\\n.input-legend span {\\n    display: inline-block;\\n    padding-left: 5px;\\n    padding-right: 5px;\\n    opacity: 0; /* Невидимый текст */\\n}\\n\\n/* Плавающий лейбл */\\n.input-label-floating {\\n  position: absolute;\\n  top: 0; /* Начальное положение */\\n  left: 8px; /* Отступ слева */\\n  padding: 0 4px; /* Отступы по бокам */\\n  color: #6c757d; /* Цвет неактивного лейбла */\\n  pointer-events: none; /* Не мешает кликам на инпут */\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  max-width: calc(100% - 16px); /* Ограничение ширины */\\n  transform-origin: left top;\\n  /* Анимация */\\n  transition: transform 0.2s cubic-bezier(0.0, 0, 0.2, 1),\\n              color 0.2s cubic-bezier(0.0, 0, 0.2, 1),\\n              font-size 0.2s cubic-bezier(0.0, 0, 0.2, 1); /* Добавляем font-size в transition */\\n\\n  /* Начальное положение (как плейсхолдер) - выравниваем по центру инпута */\\n  font-size: 1rem;\\n  transform: translateY(calc(0.8rem + 1px)); /* Выравнивание по вертикали = половина паддинга + половина бордера */\\n}\\n\\n/* Состояние лейбла \\\"всплывшее\\\" (при фокусе или значении) */\\n/* Используем :focus-within на fieldset и :not(:placeholder-shown) на input */\\n.input-fieldset:focus-within .input-label-floating,\\n.input-field:not(:placeholder-shown) + .input-label-floating { \\n  transform: translateY(-50%) scale(0.75); /* Поднимаем, уменьшаем */\\n  color: #007bff; /* Активный цвет */\\n  background-color: white; /* Фон для перекрытия рамки */\\n}\\n\\n/* Открытие выреза в legend при всплытии лейбла */\\n.input-fieldset:focus-within .input-legend,\\n.input-field:not(:placeholder-shown) + .input-label-floating + .input-legend, /* Не сработает, legend раньше */\\n/* Корректный селектор: ищем legend внутри fieldset, если input НЕ пустой ИЛИ fieldset в фокусе */\\n.input-container--label-outline .input-field:not(:placeholder-shown) ~ .input-legend,\\n.input-container--label-outline .input-fieldset:focus-within .input-legend \\n{\\n   max-width: 1000px; /* Раскрываем вырез (любое достаточно большое значение) */\\n}\\n\\n/* Цвет всплывшего лейбла при ошибке */\\n.input-container--error .input-fieldset:focus-within .input-label-floating,\\n.input-container--error .input-field:not(:placeholder-shown) + .input-label-floating { \\n  color: #dc3545;\\n}\\n\\n/* Стили fieldset при фокусе */\\n.input-fieldset:focus-within {\\n  border-color: #007bff;\\n  /* Тень убираем отсюда, она не нужна для floating label */\\n  /* box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); */\\n}\\n\\n/* Стили fieldset при ошибке */\\n.input-container--error .input-fieldset {\\n  border-color: #dc3545;\\n}\\n/* Стили legend при ошибке и фокусе/значении */\\n.input-container--error .input-fieldset:focus-within .input-legend,\\n.input-container--error .input-field:not(:placeholder-shown) ~ .input-legend {\\n    color: #dc3545;\\n}\\n\\n/* Стили fieldset при ошибке и фокусе */\\n/* .input-container--error .input-fieldset:focus-within {\\n  box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25);\\n} */\\n\\n/* --- Общие стили для Input Field --- */\\n\\n.input-field {\\n  /* padding: 0.8rem 0.8rem 0.4rem; */ /* Убираем специфичный padding */\\n  padding: 0.6rem 0.8rem; /* Возвращаем стандартный padding */\\n  /* border: none; */ /* Убираем это */\\n  border: 1px solid #ccc; /* Возвращаем стандартную рамку */\\n  /* border-radius: 0; */ /* Убираем обнуление */\\n  border-radius: 4px; /* Возвращаем стандартное скругление */\\n  font-size: 1rem;\\n  color: #212529; /* <--- Явно задаем цвет текста */\\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\\n  width: 100%;\\n  box-sizing: border-box;\\n  /* background: none; */ /* Оставляем фон по умолчанию для standard */\\n  outline: none; \\n}\\n\\n/* Убираем рамку и скругление и ставим спец. паддинг для input внутри fieldset (outline) */\\n.input-fieldset .input-field {\\n    border: none;\\n    border-radius: 0;\\n    background: none; \\n    padding: 1.2rem 0.8rem 0.4rem; \\n    color: #212529; /* <--- Явно задаем цвет текста здесь еще раз */\\n}\\n\\n/* Стили при фокусе для standard варианта */\\n.input-field:focus {\\n  /* box-shadow: none; */ /* Убираем это, тень нужна для standard */\\n  outline: none;\\n  border-color: #007bff;\\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\\n}\\n\\n/* Убираем box-shadow с инпута при фокусе, только если он внутри fieldset */\\n.input-fieldset .input-field:focus {\\n    box-shadow: none;\\n}\\n\\n/* Стили инпута при ошибке для standard */\\n.input-field--error {\\n   /* border-color убран, он на fieldset */\\n   border-color: #dc3545; /* Возвращаем рамку ошибки для standard */\\n}\\n\\n/* Стили инпута при ошибке только внутри fieldset (убираем рамку) */\\n.input-fieldset .input-field--error {\\n    border-color: transparent; /* Или border: none; */\\n}\\n\\n/* Убираем box-shadow с инпута при ошибке и фокусе */\\n.input-field--error:focus {\\n  /* box-shadow: none; */ /* Убираем это, тень нужна для standard */\\n   box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25);\\n}\\n\\n/* Убираем box-shadow с инпута при ошибке и фокусе только внутри fieldset */\\n.input-fieldset .input-field--error:focus {\\n    box-shadow: none;\\n}\\n\\n/* Стиль для сообщения об ошибке (без изменений) */\\n.input-error-message {\\n  margin-top: 0.3rem;\\n  font-size: 0.8rem;\\n  color: #dc3545;\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Input from './Input';\n\nconst meta: Meta<typeof Input> = {\n  title: 'Components/Input',\n  component: Input,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text', description: 'Текст лейбла над полем' },\n    labelVariant: {\n        control: 'select',\n        options: ['standard', 'outline'],\n        description: 'Вариант отображения лейбла'\n    },\n    error: { control: 'text', description: 'Текст ошибки под полем (null для отсутствия)' },\n    disabled: { control: 'boolean', description: 'Отключает поле' },\n    placeholder: { control: 'text', description: 'Плейсхолдер внутри поля' },\n    type: {\n        control: 'select',\n        options: ['text', 'password', 'email', 'number', 'search', 'tel', 'url'],\n        description: 'Тип поля ввода (HTML input type)'\n    },\n    // value и onChange обычно управляются состоянием, не через Controls, но можно добавить для дебага\n    value: { control: 'text', description: 'Значение поля (контролируемое)' },\n    // onChange: { action: 'changed', description: 'Событие изменения значения' }\n  },\n  args: { // Значения по умолчанию для всех историй\n    label: 'Метка поля',\n    labelVariant: 'standard',\n    placeholder: 'Введите текст...',\n    error: null,\n    disabled: false,\n    type: 'text',\n  }\n};\n\nexport default meta;\n\n// Базовая история с контролируемым состоянием\nexport const Default: StoryObj<typeof Input> = {\n  render: (args) => {\n    // Используем useState для демонстрации контролируемого инпута\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История без лейбла\nexport const WithoutLabel: StoryObj<typeof Input> = {\n  args: {\n    label: undefined, // Убираем лейбл\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История с ошибкой\nexport const WithError: StoryObj<typeof Input> = {\n  args: {\n    error: 'Это обязательное поле', // Устанавливаем текст ошибки\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n\n// История для типа password\nexport const Password: StoryObj<typeof Input> = {\n    args: {\n        label: 'Пароль',\n        type: 'password',\n        placeholder: 'Введите пароль',\n    },\n    render: (args) => {\n        const [value, setValue] = useState('');\n        return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n    },\n};\n\n// История для отключенного состояния\nexport const Disabled: StoryObj<typeof Input> = {\n    args: {\n        label: 'Отключено',\n        disabled: true,\n        placeholder: 'Нельзя редактировать',\n    },\n     render: (args) => {\n        // Для disabled можно не использовать state\n        return <Input {...args} />;\n    },\n};\n\n// История для Outline варианта\nexport const OutlineLabel: StoryObj<typeof Input> = {\n  args: {\n    labelVariant: 'outline',\n    label: 'Лейбл в рамке',\n    placeholder: undefined, \n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История для Outline варианта с ошибкой\nexport const OutlineWithError: StoryObj<typeof Input> = {\n  args: {\n    labelVariant: 'outline',\n    label: 'Поле с ошибкой',\n    placeholder: undefined,\n    error: 'Неверное значение',\n  },\n   render: (args) => {\n    const [value, setValue] = useState('some value');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n}; ","import React, { useId } from 'react';\nimport './Input.css'; // Импортируем стили\n\n// Расширяем стандартные атрибуты input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;       // Необязательный лейбл\n  error?: string | null; // Сообщение об ошибке\n  labelVariant?: 'standard' | 'outline'; // Вариант позиционирования лейбла\n  placeholder?: string; // Добавляем оригинальный плейсхолдер\n  // Можно добавить другие кастомные пропсы при необходимости, например, иконку\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  error = null,\n  className, // Получаем className для кастомизации\n  id: propId, // Получаем id из пропсов, если передан\n  labelVariant = 'standard', // Значение по умолчанию - стандартный\n  placeholder: propPlaceholder, // Получаем оригинальный плейсхолдер\n  ...props   // Остальные стандартные атрибуты input\n}) => {\n  // Генерируем уникальный ID для связи label и input, если ID не передан\n  const generatedId = useId();\n  const id = propId || generatedId;\n\n  // Формируем классы для контейнера и поля\n  const containerClassName = [\n      'input-container',\n      `input-container--label-${labelVariant}`, // Класс для варианта лейбла\n      error ? 'input-container--error' : '',\n  ].filter(Boolean).join(' ');\n\n  const inputClassName = [\n    'input-field',\n    error ? 'input-field--error' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  // Определяем плейсхолдер: пробел для outline с label, иначе оригинальный\n  const placeholder = labelVariant === 'outline' && label ? ' ' : propPlaceholder;\n\n  // Стандартный лейбл (над полем)\n  const standardLabel = label && labelVariant === 'standard' && (\n    <label htmlFor={id} className=\"input-label\">\n      {label}\n    </label>\n  );\n\n  // Outline вариант: fieldset содержит input, label (для анимации), legend (для выреза)\n  const outlineContent = labelVariant === 'outline' && (\n    <fieldset className=\"input-fieldset\" aria-hidden=\"true\"> {/* aria-hidden на fieldset, т.к. он декоративный */}\n      {/* Легенда для создания выреза, невидима */}\n      <legend className=\"input-legend\">\n        {/* Текст нужен, чтобы legend имел ширину */}\n        <span>{label ? label : ''}&nbsp;</span>\n      </legend>\n       <input\n        id={id}\n        className={inputClassName}\n        aria-invalid={error ? true : undefined}\n        aria-describedby={error ? `${id}-error` : undefined}\n        placeholder={placeholder} // Используем вычисленный плейсхолдер\n        {...props}\n      />\n      {/* Плавающий лейбл */}\n      {label && (\n          <label htmlFor={id} className=\"input-label-floating\">\n            {label}\n          </label>\n        )}\n    </fieldset>\n  );\n\n   // Обычный инпут для standard варианта\n  const standardInput = labelVariant === 'standard' && (\n      <input\n          id={id}\n          className={inputClassName}\n          aria-invalid={error ? true : undefined}\n          aria-describedby={error ? `${id}-error` : undefined}\n          placeholder={placeholder} // Используем вычисленный плейсхолдер\n          {...props}\n        />\n  );\n\n  return (\n    <div className={containerClassName}>\n      {standardLabel}\n      {/* Выбираем, что рендерить: outline структуру или standard input */}\n      {labelVariant === 'outline' ? outlineContent : standardInput}\n      {/* Сообщение об ошибке */}\n      {error && (\n        <p id={`${id}-error`} className=\"input-error-message\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Input; "],"names":[],"sourceRoot":""}