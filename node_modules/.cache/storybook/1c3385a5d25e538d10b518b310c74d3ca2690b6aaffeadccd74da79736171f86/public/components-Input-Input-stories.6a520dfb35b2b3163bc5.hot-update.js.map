{"version":3,"file":"components-Input-Input-stories.6a520dfb35b2b3163bc5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAWA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;;;;;;AAIA;AACA;AACA;AAAA;;AAAA;AAEA;AAAA;AAEA;;AAAA;AAAA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AAAA;AACA;;;;;;;;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://wui/./src/components/Input/Input.tsx"],"sourcesContent":["import React, { useId } from 'react';\nimport './Input.css'; // Импортируем стили\n\n// Расширяем стандартные атрибуты input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;       // Необязательный лейбл\n  error?: string | null; // Сообщение об ошибке\n  labelVariant?: 'standard' | 'outline'; // Вариант позиционирования лейбла\n  placeholder?: string; // Добавляем оригинальный плейсхолдер\n  // Можно добавить другие кастомные пропсы при необходимости, например, иконку\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  error = null,\n  className, // Получаем className для кастомизации\n  id: propId, // Получаем id из пропсов, если передан\n  labelVariant = 'standard', // Значение по умолчанию - стандартный\n  placeholder: propPlaceholder, // Получаем оригинальный плейсхолдер\n  ...props   // Остальные стандартные атрибуты input\n}) => {\n  // Генерируем уникальный ID для связи label и input, если ID не передан\n  const generatedId = useId();\n  const id = propId || generatedId;\n\n  // Формируем классы для контейнера и поля\n  const containerClassName = [\n      'input-container',\n      `input-container--label-${labelVariant}`, // Класс для варианта лейбла\n      error ? 'input-container--error' : '',\n  ].filter(Boolean).join(' ');\n\n  const inputClassName = [\n    'input-field',\n    error ? 'input-field--error' : '',\n    className\n  ].filter(Boolean).join(' ');\n\n  // Определяем плейсхолдер: пробел для outline с label, иначе оригинальный\n  const placeholder = labelVariant === 'outline' && label ? ' ' : propPlaceholder;\n\n  // Стандартный лейбл (над полем)\n  const standardLabel = label && labelVariant === 'standard' && (\n    <label htmlFor={id} className=\"input-label\">\n      {label}\n    </label>\n  );\n\n  // Outline вариант: fieldset содержит input, label (для анимации), legend (для выреза)\n  const outlineContent = labelVariant === 'outline' && (\n    <fieldset className=\"input-fieldset\" aria-hidden=\"true\"> {/* aria-hidden на fieldset, т.к. он декоративный */}\n      {/* Легенда для создания выреза, невидима */}\n      <legend className=\"input-legend\">\n        {/* Текст нужен, чтобы legend имел ширину */}\n        <span>{label ? label : ''}&nbsp;</span>\n      </legend>\n       <input\n        id={id}\n        className={inputClassName}\n        aria-invalid={error ? true : undefined}\n        aria-describedby={error ? `${id}-error` : undefined}\n        placeholder={placeholder} // Используем вычисленный плейсхолдер\n        {...props}\n      />\n      {/* Плавающий лейбл */}\n      {label && (\n          <label htmlFor={id} className=\"input-label-floating\">\n            {label}\n          </label>\n        )}\n    </fieldset>\n  );\n\n   // Обычный инпут для standard варианта\n  const standardInput = labelVariant === 'standard' && (\n      <input\n          id={id}\n          className={inputClassName}\n          aria-invalid={error ? true : undefined}\n          aria-describedby={error ? `${id}-error` : undefined}\n          placeholder={placeholder} // Используем вычисленный плейсхолдер\n          {...props}\n        />\n  );\n\n  return (\n    <div className={containerClassName}>\n      {standardLabel}\n      {/* Выбираем, что рендерить: outline структуру или standard input */}\n      {labelVariant === 'outline' ? outlineContent : standardInput}\n      {/* Сообщение об ошибке */}\n      {error && (\n        <p id={`${id}-error`} className=\"input-error-message\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Input; "],"names":[],"sourceRoot":""}