{"version":3,"file":"components-Select-Select-stories.e17f926599e436abfef2.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAcA;AAoBA;AASA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AAAA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAAA;AAAA;;;;;;;AApsources":["webpack://wake-ui/./src/components/Select/Select.tsx"],"sourcesContent":["import React, { useState, useId, useMemo } from 'react';\nimport {\n  useFloating,\n  useClick,\n  useDismiss,\n  useRole,\n  useListNavigation, // Для навигации по списку клавиатурой\n  useInteractions,\n  FloatingFocusManager,\n  FloatingPortal,\n  flip,\n  offset, // <--- Импортируем offset\n  size as floatingSize, // Переименовываем, чтобы не конфликтовать с AvatarProps\n  autoUpdate,\n} from '@floating-ui/react';\nimport './Select.css'; // Импортируем стили\n\n// Тип для опций селекта\nexport interface SelectOption {\n  value: string | number;\n  label: string;\n  disabled?: boolean; // Опционально: отключенная опция\n}\n\ninterface SelectProps {\n  options: SelectOption[];\n  value: string | number | null; // Текущее выбранное значение\n  onChange: (value: string | number | null) => void; // Функция обратного вызова при выборе\n  placeholder?: string;\n  label?: string;         // Лейбл над селектом\n  disabled?: boolean;\n  className?: string;     // Пользовательский класс для контейнера\n  // Добавить error?\n}\n\nconst Select: React.FC<SelectProps> = ({\n  options,\n  value,\n  onChange,\n  placeholder = 'Выберите...',\n  label,\n  disabled = false,\n  className,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeIndex, setActiveIndex] = useState<number | null>(null); // Индекс активного элемента для навигации\n\n  const listRef = React.useRef<Array<HTMLElement | null>>([]); // Ref'ы для элементов списка\n\n  const generatedId = useId();\n  const labelId = label ? `${generatedId}-label` : undefined;\n  const listboxId = `${generatedId}-listbox`;\n\n  const { refs, floatingStyles, context } = useFloating({\n    open: isOpen,\n    onOpenChange: setIsOpen,\n    whileElementsMounted: autoUpdate,\n    placement: 'bottom-start', // Позиционируем снизу от начала\n    middleware: [\n      offset(4), // <--- Добавляем отступ (например, 4px)\n      flip({ padding: 5 }),\n      floatingSize({ // Подгоняем ширину списка под ширину кнопки\n        apply({ rects, elements }) {\n          Object.assign(elements.floating.style, {\n            width: `${rects.reference.width}px`,\n          });\n        },\n        padding: 5,\n      }),\n    ],\n  });\n\n  // --- Взаимодействия ---\n  const click = useClick(context);\n  const dismiss = useDismiss(context);\n  const role = useRole(context, { role: 'listbox' });\n  // Навигация по списку (стрелки, Enter, Esc)\n  const listNavigation = useListNavigation(context, {\n    listRef,\n    activeIndex,\n    onNavigate: setActiveIndex,\n    virtual: true, // Т.к. рендерим не все опции сразу (хотя в нашем случае рендерим все)\n    loop: true,\n  });\n\n  const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions([\n    click,\n    dismiss,\n    role,\n    listNavigation,\n  ]);\n\n  // Находим лейбл выбранного значения\n  const selectedLabel = useMemo(() => {\n    return options.find(option => option.value === value)?.label;\n  }, [options, value]);\n\n  // Обработчик выбора опции\n  const handleSelect = (optionValue: string | number | null) => {\n    if (optionValue !== null) {\n        onChange(optionValue);\n        setIsOpen(false);\n    }\n  };\n\n  const containerClassName = [\n    'select-container',\n    disabled ? 'select-container--disabled' : '',\n    className,\n  ].filter(Boolean).join(' ');\n\n\n  return (\n    <div className={containerClassName}>\n       {/* Лейбл над селектом */}\n       {label && (\n        <label id={labelId} className=\"select-label\">\n          {label}\n        </label>\n      )}\n      {/* Кнопка, открывающая список */}\n      <button\n        ref={refs.setReference}\n        className=\"select-button\"\n        disabled={disabled}\n        aria-labelledby={labelId}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isOpen}\n        aria-autocomplete=\"none\"\n        {...getReferenceProps()}\n      >\n        <span className=\"select-value\">\n            {selectedLabel || <span className=\"select-placeholder\">{placeholder}</span>}\n        </span>\n        <span className=\"select-arrow\" aria-hidden=\"true\">\n          {/* Простая SVG стрелка вниз */}\n          <svg viewBox=\"0 0 16 16\" fill=\"currentColor\" width=\"12\" height=\"12\"><path d=\"M8 11L3 6h10z\"/></svg>\n        </span>\n      </button>\n\n      {/* Список опций */}\n      <FloatingPortal>\n        {isOpen && (\n          <FloatingFocusManager context={context} modal={false}>\n            <div\n              ref={refs.setFloating}\n              style={floatingStyles}\n              className=\"select-listbox\"\n              role=\"listbox\"\n              id={listboxId}\n              aria-labelledby={labelId}\n              {...getFloatingProps()}\n            >\n              {options.map((option, index) => (\n                <div\n                  key={option.value}\n                  ref={(node) => { listRef.current[index] = node; }}\n                  role=\"option\"\n                  className={`select-option ${activeIndex === index ? 'select-option--active' : ''} ${option.value === value ? 'select-option--selected' : ''} ${option.disabled ? 'select-option--disabled' : ''}`}\n                  tabIndex={activeIndex === index ? 0 : -1}\n                  aria-selected={activeIndex === index && isOpen || option.value === value}\n                  aria-disabled={option.disabled}\n                  {...getItemProps({\n                    // Обработка клика или Enter на опции\n                    onClick: () => !option.disabled && handleSelect(option.value),\n                    onKeyDown: (event) => {\n                        if (event.key === 'Enter' || event.key === ' ') {\n                           if (!option.disabled) handleSelect(option.value);\n                        }\n                    },\n                  })}\n                >\n                  {option.label}\n                   {/* Можно добавить галочку для выбранной опции */}\n                   {option.value === value && (\n                       <span className=\"select-option-checkmark\" aria-hidden=\"true\">✓</span>\n                   )}\n                </div>\n              ))}\n            </div>\n          </FloatingFocusManager>\n        )}\n      </FloatingPortal>\n    </div>\n  );\n};\n\nexport default Select; "],"names":[],"sourceRoot":""}