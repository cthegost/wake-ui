{"version":3,"file":"components-Input-Input-stories.537ed47a7ada8532791f.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AASA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAAA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://wui/./src/components/Input/Input.css","webpack://wui/./src/components/Input/Input.css?da8a","webpack://wui/./src/components/Input/Input.stories.tsx","webpack://wui/./src/components/Input/Input.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `/* Контейнер для инпута, лейбла и ошибки */\n.input-container {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem; /* Отступ снизу */\n  width: 100%; /* По умолчанию занимает всю доступную ширину */\n  max-width: 400px; /* Ограничим максимальную ширину для демонстрации */\n}\n\n/* Стиль для лейбла */\n.input-label {\n  margin-bottom: 0.3rem;\n  font-size: 0.9rem;\n  color: #333;\n  font-weight: 500;\n}\n\n/* Базовые стили для поля ввода */\n.input-field {\n  padding: 0.6rem 0.8rem;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 1rem;\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  width: 100%; /* Занимает всю ширину контейнера */\n  box-sizing: border-box; /* Учитываем padding и border в ширине */\n}\n\n/* Стили при фокусе */\n.input-field:focus {\n  outline: none;\n  border-color: #007bff; /* Подсветка рамки при фокусе */\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); /* Легкая тень */\n}\n\n/* Стили при ошибке */\n.input-field--error {\n  border-color: #dc3545; /* Красная рамка */\n}\n\n.input-field--error:focus {\n  box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25); /* Красная тень при фокусе и ошибке */\n}\n\n/* Стиль для сообщения об ошибке */\n.input-error-message {\n  margin-top: 0.3rem;\n  font-size: 0.8rem;\n  color: #dc3545; /* Красный цвет текста */\n} `, \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/Input/Input.css\"],\"names\":[],\"mappings\":\"AAAA,0CAA0C;AAC1C;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB,EAAE,iBAAiB;EACtC,WAAW,EAAE,+CAA+C;EAC5D,gBAAgB,EAAE,mDAAmD;AACvE;;AAEA,qBAAqB;AACrB;EACE,qBAAqB;EACrB,iBAAiB;EACjB,WAAW;EACX,gBAAgB;AAClB;;AAEA,iCAAiC;AACjC;EACE,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,sEAAsE;EACtE,WAAW,EAAE,mCAAmC;EAChD,sBAAsB,EAAE,wCAAwC;AAClE;;AAEA,qBAAqB;AACrB;EACE,aAAa;EACb,qBAAqB,EAAE,+BAA+B;EACtD,6CAA6C,EAAE,gBAAgB;AACjE;;AAEA,qBAAqB;AACrB;EACE,qBAAqB,EAAE,kBAAkB;AAC3C;;AAEA;EACE,6CAA6C,EAAE,qCAAqC;AACtF;;AAEA,kCAAkC;AAClC;EACE,kBAAkB;EAClB,iBAAiB;EACjB,cAAc,EAAE,wBAAwB;AAC1C\",\"sourcesContent\":[\"/* Контейнер для инпута, лейбла и ошибки */\\n.input-container {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; /* Отступ снизу */\\n  width: 100%; /* По умолчанию занимает всю доступную ширину */\\n  max-width: 400px; /* Ограничим максимальную ширину для демонстрации */\\n}\\n\\n/* Стиль для лейбла */\\n.input-label {\\n  margin-bottom: 0.3rem;\\n  font-size: 0.9rem;\\n  color: #333;\\n  font-weight: 500;\\n}\\n\\n/* Базовые стили для поля ввода */\\n.input-field {\\n  padding: 0.6rem 0.8rem;\\n  border: 1px solid #ccc;\\n  border-radius: 4px;\\n  font-size: 1rem;\\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\\n  width: 100%; /* Занимает всю ширину контейнера */\\n  box-sizing: border-box; /* Учитываем padding и border в ширине */\\n}\\n\\n/* Стили при фокусе */\\n.input-field:focus {\\n  outline: none;\\n  border-color: #007bff; /* Подсветка рамки при фокусе */\\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); /* Легкая тень */\\n}\\n\\n/* Стили при ошибке */\\n.input-field--error {\\n  border-color: #dc3545; /* Красная рамка */\\n}\\n\\n.input-field--error:focus {\\n  box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.25); /* Красная тень при фокусе и ошибке */\\n}\\n\\n/* Стиль для сообщения об ошибке */\\n.input-error-message {\\n  margin-top: 0.3rem;\\n  font-size: 0.8rem;\\n  color: #dc3545; /* Красный цвет текста */\\n} \"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n  var p;\n  for (p in a) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n  for (p in b) {\n    if (isNamedExport && p === \"default\") {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!a[p]) {\n      return false;\n    }\n  }\n  return true;\n};\n    var isNamedExport = !content.locals;\n    var oldLocals = isNamedExport ? namedExport : content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\",\n      function () {\n        if (!isEqualLocals(oldLocals, isNamedExport ? namedExport : content.locals, isNamedExport)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = isNamedExport ? namedExport : content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\n\nexport * from \"!!../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[6].use[1]!./Input.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState } from 'react';\nimport type { Meta, StoryObj } from '@storybook/react';\nimport Input from './Input';\n\nconst meta: Meta<typeof Input> = {\n  title: 'Components/Input',\n  component: Input,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    label: { control: 'text', description: 'Текст лейбла над полем' },\n    error: { control: 'text', description: 'Текст ошибки под полем (null для отсутствия)' },\n    disabled: { control: 'boolean', description: 'Отключает поле' },\n    placeholder: { control: 'text', description: 'Плейсхолдер внутри поля' },\n    type: {\n        control: 'select',\n        options: ['text', 'password', 'email', 'number', 'search', 'tel', 'url'],\n        description: 'Тип поля ввода (HTML input type)'\n    },\n    // value и onChange обычно управляются состоянием, не через Controls, но можно добавить для дебага\n    value: { control: 'text', description: 'Значение поля (контролируемое)' },\n    // onChange: { action: 'changed', description: 'Событие изменения значения' }\n  },\n  args: { // Значения по умолчанию для всех историй\n    label: 'Метка поля',\n    placeholder: 'Введите текст...',\n    error: null,\n    disabled: false,\n    type: 'text',\n  }\n};\n\nexport default meta;\n\n// Базовая история с контролируемым состоянием\nexport const Default: StoryObj<typeof Input> = {\n  render: (args) => {\n    // Используем useState для демонстрации контролируемого инпута\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История без лейбла\nexport const WithoutLabel: StoryObj<typeof Input> = {\n  args: {\n    label: undefined, // Убираем лейбл\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n// История с ошибкой\nexport const WithError: StoryObj<typeof Input> = {\n  args: {\n    error: 'Это обязательное поле', // Устанавливаем текст ошибки\n  },\n  render: (args) => {\n    const [value, setValue] = useState('');\n    return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n  },\n};\n\n\n// История для типа password\nexport const Password: StoryObj<typeof Input> = {\n    args: {\n        label: 'Пароль',\n        type: 'password',\n        placeholder: 'Введите пароль',\n    },\n    render: (args) => {\n        const [value, setValue] = useState('');\n        return <Input {...args} value={value} onChange={(e) => setValue(e.target.value)} />;\n    },\n};\n\n// История для отключенного состояния\nexport const Disabled: StoryObj<typeof Input> = {\n    args: {\n        label: 'Отключено',\n        disabled: true,\n        placeholder: 'Нельзя редактировать',\n    },\n     render: (args) => {\n        // Для disabled можно не использовать state\n        return <Input {...args} />;\n    },\n}; ","import React, { useId } from 'react';\nimport './Input.css'; // Импортируем стили\n\n// Расширяем стандартные атрибуты input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;       // Необязательный лейбл\n  error?: string | null; // Сообщение об ошибке\n  // Можно добавить другие кастомные пропсы при необходимости, например, иконку\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  error = null,\n  className, // Получаем className для кастомизации\n  id: propId, // Получаем id из пропсов, если передан\n  ...props   // Остальные стандартные атрибуты input\n}) => {\n  // Генерируем уникальный ID для связи label и input, если ID не передан\n  const generatedId = useId();\n  const id = propId || generatedId;\n\n  // Формируем классы: базовый, при наличии ошибки, пользовательский\n  const inputClassName = [\n    'input-field', // Базовый класс\n    error ? 'input-field--error' : '', // Класс при ошибке\n    className // Пользовательские классы\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className=\"input-container\">\n      {/* Лейбл (если есть) */}\n      {label && (\n        <label htmlFor={id} className=\"input-label\">\n          {label}\n        </label>\n      )}\n\n      {/* Поле ввода */}\n      <input\n        id={id}\n        className={inputClassName}\n        aria-invalid={error ? true : undefined} // Для доступности: указываем на ошибку\n        aria-describedby={error ? `${id}-error` : undefined} // Связываем с сообщением об ошибке\n        {...props} // Передаем остальные пропсы (type, placeholder, value, onChange и т.д.)\n      />\n\n      {/* Сообщение об ошибке (если есть) */}\n      {error && (\n        <p id={`${id}-error`} className=\"input-error-message\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Input; "],"names":[],"sourceRoot":""}