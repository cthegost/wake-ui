{"version":3,"file":"components-Input-Input-stories.f5a6650da7159b371809.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAAA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://wui/./src/components/Input/Input.tsx"],"sourcesContent":["import React, { useId } from 'react';\nimport './Input.css'; // Импортируем стили\n\n// Расширяем стандартные атрибуты input\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;       // Необязательный лейбл\n  error?: string | null; // Сообщение об ошибке\n  labelVariant?: 'standard' | 'outline'; // Вариант позиционирования лейбла\n  // Можно добавить другие кастомные пропсы при необходимости, например, иконку\n}\n\nconst Input: React.FC<InputProps> = ({\n  label,\n  error = null,\n  className, // Получаем className для кастомизации\n  id: propId, // Получаем id из пропсов, если передан\n  ...props   // Остальные стандартные атрибуты input\n}) => {\n  // Генерируем уникальный ID для связи label и input, если ID не передан\n  const generatedId = useId();\n  const id = propId || generatedId;\n\n  // Формируем классы: базовый, при наличии ошибки, пользовательский\n  const inputClassName = [\n    'input-field', // Базовый класс\n    error ? 'input-field--error' : '', // Класс при ошибке\n    className // Пользовательские классы\n  ].filter(Boolean).join(' ');\n\n  return (\n    <div className=\"input-container\">\n      {/* Лейбл (если есть) */}\n      {label && (\n        <label htmlFor={id} className=\"input-label\">\n          {label}\n        </label>\n      )}\n\n      {/* Поле ввода */}\n      <input\n        id={id}\n        className={inputClassName}\n        aria-invalid={error ? true : undefined} // Для доступности: указываем на ошибку\n        aria-describedby={error ? `${id}-error` : undefined} // Связываем с сообщением об ошибке\n        {...props} // Передаем остальные пропсы (type, placeholder, value, onChange и т.д.)\n      />\n\n      {/* Сообщение об ошибке (если есть) */}\n      {error && (\n        <p id={`${id}-error`} className=\"input-error-message\" role=\"alert\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Input; "],"names":[],"sourceRoot":""}